"""
Generated by 'esmerald createapp' using Esmerald 2.0.3.
"""
from esmerald import Request
from esmerald.openapi.datastructures import OpenAPIResponse
from esmerald.conf import settings
from esmerald.routing.views import APIView
from esmerald.routing.handlers import get, post, put, delete
from typing import List, Union

from .daos import TransactionDAO
from .schemas import *


class TransactionView(APIView):
    """
    Transactions API View
    """
    path = "/transactions"

    @get(
        path="/mytransactions",
        tags=["Transaction"],
        summary="Gets user transactions",
        description="Returns all transactions for the user",
        responses={
            200: OpenAPIResponse(model=[TransactionOutListSchema]),
            401: OpenAPIResponse(model=ErrorSchema, description="Not autorized")
        }
    )
    async def get_by_user(self, request: Request) -> List[TransactionOutListSchema]:
        dao = TransactionDAO()
        return await dao.get_user_transactions(request.user)

    @get(
        path="/{id:int}",
        tags=["Transaction"],
        summary="Get a transaction by ID",
        description="Returns the transaction by a given ID",
        responses={
            200: OpenAPIResponse(model=TransactionOutDetailSchema),
            400: OpenAPIResponse(model=ErrorSchema, description="Bad response"),
            401: OpenAPIResponse(model=ErrorSchema, description="Not autorized")
        }
    )
    async def get(
        self, 
        id: int, 
        request: Request
    ) -> TransactionOutDetailSchema:
        dao = TransactionDAO()
        return await dao.get(id, user=request.user)

    @post(
        path="/",
        tags=["Transaction"],
        summary="Create a transaction",
        description="Creates a new transaction for a user",
        responses={
            200: OpenAPIResponse(model=TransactionOutDetailSchema),
            400: OpenAPIResponse(model=ErrorSchema, description="Bad response"),
            401: OpenAPIResponse(model=ErrorSchema, description="Not authorized")
        }
    )
    async def create(
        self,
        request: Request,
        data: TransactionCreateSchema
    ) -> TransactionOutDetailSchema:
        dao = TransactionDAO()
        return await dao.create(data, request.user)

    @put(
        path="/{id:int}",
        tags=["Transaction"],
        summary="Update a transaction",
        description="Update a transaction",
        responses={
            400: OpenAPIResponse(model=ErrorSchema, description="Bad response"),
            401: OpenAPIResponse(model=ErrorSchema, description="Not authorized")
        }
    )
    async def update(
        self,
        id: int,
        data: TransactionUpdateSchema
    ) -> None:
        dao = TransactionDAO()
        await dao.update(id, data)

    @delete(
        path="/{id:int}",
        tags=["Transaction"],
        summary="Delete a transaction",
        description="Delete a transaction",
        responses={
            404: OpenAPIResponse(model=ErrorSchema, description="Bad response"),
            400: OpenAPIResponse(model=ErrorSchema, description="Not authorized")
        }
    )
    async def delete(self, id: int) -> None:
        dao = TransactionDAO()
        await dao.delete(id)
        